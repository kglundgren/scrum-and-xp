@model scrum_and_xp.ViewModels.Chat
    @using scrum_and_xp.Models;
@{
    ViewBag.Title = "Chat";
}
<h2>Chat</h2>
<div class="container">
    <meta charset="utf-8" />
    <input type="text" id="message" />
    <input type="button" id="sendmessage" value="Send" />
    <input type="hidden" id="displayname" />
    <ul id="discussion">
    </ul>
</div>
<h2>Users online</h2>
@if (HttpRuntime.Cache["LoggedInUsers"] != null)
{

    if (Model.loggedInUsers.Count > 0)
    {   List<ApplicationUser> LoopedUsers = new List<ApplicationUser>();
        <div class="ChatBox">
            <ul>
                @foreach (var user in Model.loggedInUsers)
                {
                    
                    if (!LoopedUsers.Contains(user))
                    { LoopedUsers.Add(user);
                        <li>
                        @*<div class="r_row">
                        <div class="r_name">@Html.Encode(user)</div>
                        </div>*@
                        @user.FirstName @user.LastName
                        </li>}
                    }
                </ul>
        </div>
    }
}

@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.2.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>
        $(function () {
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.chatHub;
            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (name, message) {
                // Add the message to the page.
                $('#discussion').append('<li><strong>' + htmlEncode(name)
                    + '</strong>: ' + htmlEncode(message) + '</li>');
            };
            // Get the user name and store it to prepend to messages.
            //$('#displayname').val(prompt('Enter your name:', ''));
            $('#displayname').val('@Model.Name');
            // Set initial focus to message input box.
            $('#message').focus();
            // Start the connection.
            $.connection.hub.start().done(function () {
                $('#sendmessage').click(function () {
                    // Call the Send method on the hub.
                    chat.server.send($('#displayname').val(), $('#message').val());
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                });
            });
        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>

    @*Displays current users online, refreshes every 5 seconds.*@
    <script type="text/javascript">
        $(function () {
            setInterval(loginDisplay, 5000);
        });

        function loginDisplay() {
            $.post("/Account/getLoginUser", null, function (data) {

            });
        }
    </script>
}
