@model scrum_and_xp.ViewModels.CreatePostViewModel


@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>

@{
    if (Model.Type == "Informal")
    {
        <p>Here you can create an informal blogpost!</p>
    }
    else if (Model.Type == "Formal")
    {
        <p>Here you can create a formal blogpost!</p>
    }
}


@using (Html.BeginForm("Create", "Posts", new { type = Model.Type }, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Post</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Content, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Content, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
                <br />
                @*@Html.TextBox("File", "", new { type = "file", id = "upload", @class = "btn btn-primary" })*@
                <style>
                    [hidden] {
                        display: none !important;
                    }
                </style>
                <label class="btn btn-default">
                    Browse for files <input type="file" name="file" id="upload" hidden>
                </label>
                <br />
                @Html.ValidationMessageFor(model => model.File, "", new { @class = "text-danger" })
                <span id="file-size-error" style="display: none; color: red;">File cannot be bigger than 3.5 MB.</span>

                <br />
                @{
                    if (Model.Type == "Informal")
                    {
                        @Html.DropDownListFor(m => m.SelectedCategoryId, new SelectList(Model.InformalCategories, "Id", "Name"), "Please select category", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.SelectedCategoryId, "", new { @class = "text-danger" })
                    }
                    else if (Model.Type == "Formal")
                    {
                        @Html.DropDownListFor(m => m.SelectedFormalTypeId, new SelectList(Model.FormalTypes, "Id", "Name"), "Please select formal type", new { @class = "form-control", @onchange = "FillCategory()" })
                        <br />
                        @Html.DropDownListFor(m => m.SelectedCategoryId, new SelectList(new List<String>(), "Id", "Name"), "Please select formal category", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.SelectedCategoryId, "", new { @class = "text-danger" })
                    }
                }
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-primary" id="save-btn" />
            </div>
        </div>
    </div>
}

<div>
    @if (Model.Type == "Informal")
    {
        @Html.ActionLink("Back to List", "InformalPosts")
    }
    else if (Model.Type == "Formal")
    {
        @Html.ActionLink("Back to List", "FormalPosts")
    }
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            var modelType = @Model.Type;
            if (modelType === "Formal") {
                FillCategory();
            }
        });
        function FillCategory() {
            var typeId = $('#SelectedFormalTypeId').val();
            if (typeId !== null) {
                $.ajax({
                    url: '/Posts/FillCategory',
                    type: "GET",
                    dataType: "JSON",
                    data: { Type: typeId },
                    success: function (categories) {
                        $("#SelectedCategoryId").html(""); // clear before appending new list
                        $.each(categories, function (i, category) {
                            $("#SelectedCategoryId").append(
                                $('<option></option>').val(category.Value).html(category.Text));
                        });
                    }
                });
            }
        }
        // Validate file size and extension.

        $('#upload').bind('change', function () {
            if (this.files[0].size > 3500000) {
                $('#save-btn').prop('disabled', true);
                $('#file-size-error').show();
            }
            else {
                $('#save-btn').prop('disabled', false);
                $('#file-size-error').hide();
            }
        });


    </script>
}
